{"version":3,"sources":["components/Post.js","components/Footer.js","services/posts.js","App.js","index.js"],"names":["Post","post","className","content","Footer","style","color","fontStyle","fontSize","axios","get","then","response","data","newObject","App","useState","posts","setPosts","newPost","setNewPost","showAll","setShowAll","useEffect","postService","initialPosts","onClick","map","key","id","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","important","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"2OAUeA,EARF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACC,wBAAIC,UAAU,QACZD,EAAKE,UCYMC,EAfA,WAOd,OACC,yBAAKC,MAPc,CACnBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKT,6BACA,0F,gBCMY,EAfA,WAEd,OADgBC,IAAMC,IAHP,cAIAC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa3B,EAVA,SAAAC,GAEd,OADgBL,IAAMR,KARP,aAQqBa,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC2F3BE,EA/FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAMhBC,qBAAU,WACRC,IAEGb,MAAK,SAAAc,GAAY,OAAIP,EAASO,QAChC,IA0DH,OACE,6BACE,qCAIA,6BACE,4BAAQC,QAAS,kBAAMJ,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAlEeJ,EAAMU,KAAI,SAAA1B,GAAI,OAC/B,kBAAC,EAAD,CACE2B,IAAK3B,EAAK4B,GACV5B,KAAMA,QAkEN,0BAAM6B,SA1DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9B,QAASgB,EACTe,MAAM,IAAIC,MAAOC,cACjBC,UAAWC,KAAKC,SAAW,GAC3BV,GAAIZ,EAAMuB,OAAS,GAGrBhB,EACUS,GACPtB,MAAK,SAAAE,GACJK,EAASD,EAAMwB,OAAO5B,IACtBO,EAAW,SA8CX,2BACEsB,MAAOvB,EACPwB,SAjEiB,SAACZ,GACxBX,EAAWW,EAAMa,OAAOF,UAkEpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,QC3FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fb0fcda8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Post = ({ post }) => {\r\n\treturn (\r\n\t\t<li className='post'>\r\n\t\t\t{post.content}\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default Post","import React from 'react'\r\n\r\nconst Footer = () => {\r\n\tconst footerStyle = {\r\n\t\tcolor: 'green',\r\n\t\tfontStyle: 'italic',\r\n\t\tfontSize: 16\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={footerStyle}>\r\n\t\t\t<br />\r\n\t\t\t<em>Csepregis Social app, be together no matter where we are</em>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\nconst baseUrl = '/api/posts'\r\n\r\nconst getAll = () => {\r\n\tconst request = axios.get(baseUrl)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n\tconst request = axios.post(baseUrl, newObject)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Post from './components/Post'\n//import Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport postService from './services/posts'\n\nconst App = () => {\n  const [posts, setPosts] = useState([])\n  const [newPost, setNewPost] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  //const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    postService\n      .getAll()\n      .then(initialPosts => setPosts(initialPosts))\n  }, [])\n\n\n  const rows = () => posts.map(post =>\n    <Post\n      key={post.id}\n      post={post}\n    />\n  )\n\n  const handleNoteChange = (event) => {\n    setNewPost(event.target.value)\n  }\n\n  const addPost = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newPost,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: posts.length + 1,\n    }\n\n    postService\n      .create(noteObject)\n      .then(data => {\n        setPosts(posts.concat(data))\n        setNewPost('')\n      })\n  }\n\n  // const toggleImportanceOf = id => {\n  //   const post = posts.find(n => n.id === id)\n  //   const changedNote = { ...post, important: !note.important }\n\n  // const updatePost = async (changedNote, id) => {\n  //   const data = await postService.update(changedNote, id)\n  //   // map blogs and change one which got liked\n  //   const newPosts = [...posts].map(post => post.id === post.id ? data : post)\n  //   setPosts(newPost)\n\n  // postService\n  //   .update(id, changedNote)\n  //   .then(returnedNote => {\n  //     setPosts(posts.map(note => note.id !== id ? post : returnedNote))\n  //   })\n  //   .catch(error => {\n  //     setErrorMessage(\n  //       `Note '${post.content}' was already removed from server`\n  //     )\n  //     setTimeout(() => {\n  //       setErrorMessage(null)\n  //     }, 5000)\n  //     setPosts(posts.filter(n => n.id !== id))\n  //   })\n  //}\n\n\n  return (\n    <div>\n      <h1>Posts</h1>\n\n      {/* <Notification message={errorMessage} /> */}\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addPost}>\n        <input\n          value={newPost}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}